/*
https://codeforces.com/contest/1249/problem/C2
*/
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
public class Solver
{
    static List<int> state;
    static List<List<int>> g;
    static long n;
    static long[] blocks;
    static void Solve()
    {
        n = ReadLong();
        blocks = new long[39];
        blocks[0] = 1;
        for (int i = 1; i < 39; i++)
            blocks[i] = blocks[i - 1] * 3;

        Console.WriteLine(best(n, 39));
    }
    static  long best(long num, int lim)
    {
        for (int i = 0; i <= 38; i++)
        {
            if (blocks[i] == num && i <= lim)
                return num;
            if (blocks[i] > num)
            {
                if (i - 1 > lim) return 0;
                long c2 = best(num - blocks[i - 1], i - 2);
                if (c2 + blocks[i - 1] >= num)
                    return c2+blocks[i-1];
                if (i<=lim)
                return blocks[i];
                return 0;
            }
        }
        return 0;
    }
    static SortedSet<long> nums;
    static async void beforeAllTests()
    {

    }
    class Pair
    {
        public int pos;
        public int relativeTemp;
        public Pair(int pos, int rel)
        {
            this.pos = pos;
            this.relativeTemp = rel;
        }
    }
    class comper : IComparer<Pair>
    {
        public int Compare(Pair a, Pair b)
        {
            if (b.relativeTemp == a.relativeTemp)
                return b.pos - a.pos;
            return a.relativeTemp - b.relativeTemp;
        }
    }
    static TextReader reader;
    static TextWriter writer;
    static bool multiTestCases = true;
    static void Main()
    {
        reader = new StreamReader(Console.OpenStandardInput());
        writer = new StreamWriter(Console.OpenStandardOutput());
        int n = 1;
        beforeAllTests();
        if (multiTestCases)
            n = ReadInt();
        while (n-- > 0)
            Solve();
        reader.Close();
        writer.Close();
    }

    private static List<int> ReadLeetCodeArray()
    {
        string s = reader.ReadLine();
        List<int> arr = new List<int>();
        s = s.Substring(1);
        s = s.Remove(s.Length - 1);
        var x = s.Split(',');
        foreach (var m in x)
            arr.Add(Int32.Parse(m));
        return arr;
    }
    private static List<List<int>> ReadLeetCodeArrayOfArrays()
    {
        string s = reader.ReadLine();
        List<List<int>> arr = new List<List<int>>();
        s = s.Substring(2);
        s = s.Remove(s.Length - 2);
        var arraysString = s.Split("],[");
        foreach (var numsString in arraysString)
        {
            var nums = numsString.Split(',');
            arr.Add(new List<int>());
            foreach (var num in nums)
                arr[arr.Count - 1].Add(Int32.Parse(num));
        }
        return arr;
    }

    private static Queue<string> currentLineTokens = new Queue<string>();
    private static string[] ReadAndSplitLine() { return reader.ReadLine().Split(new[] { ' ', '\t', }, StringSplitOptions.RemoveEmptyEntries); }
    public static string ReadToken() { while (currentLineTokens.Count == 0) currentLineTokens = new Queue<string>(ReadAndSplitLine()); return currentLineTokens.Dequeue(); }
    public static int ReadInt() { return int.Parse(ReadToken()); }
    public static long ReadLong() { return long.Parse(ReadToken()); }
    public static double ReadDouble() { return double.Parse(ReadToken(), CultureInfo.InvariantCulture); }

    public static string[] ReadLines(int quantity) { string[] lines = new string[quantity]; for (int i = 0; i < quantity; i++) lines[i] = reader.ReadLine().Trim(); return lines; }
    public static int[] ReadIntArray() { return ReadAndSplitLine().Select(int.Parse).ToArray(); }

}

